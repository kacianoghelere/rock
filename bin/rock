#!/usr/bin/env node

var P = require('autoresolve')
  , util = require('util')
  , rock = require(P('lib/rock.js'))
  , osenv = require('osenv')
  , fs = require('fs-extra')
  , path = require('path')
  , nom = require('nomnom')
  , cl = require('cl')


/*program.version(require('../package.json').version)
  .option('-r, --rock [rock]', 'The rock path or Github repo.')
  .parse(process.argv)*/

var opts = nom.script('rock')
  .option('version',  {help: 'Print version and exit.', flag: true, callback: function() { return require('../package.json').version }})
  .option('path',     {help: 'Output path of generated directory structure.', position: 0, required: true})
  .option('rock',     {help: 'The rock path or Github repo.', abbr: 'r', metavar: 'ROCK', required: true})
  .option('config',   {help: 'The config file. Defaults to ~/.rock/rock.conf.json', abbr: 'c', default: path.join(osenv.home(), '.rock', 'rock.conf.json')})
  .option('file',     {help: 'If the rock is a single file. Supports http as well.', abbr: 'f', flag: true, default: false} )
  .option('topen',    {help: 'Opening template value. Defaults to {{', default: '{{'})
  .option('tclose',   {help: 'Closing template value. Defaults to }}', default: '}}'})
  .parse()


var config = {}
if (fs.existsSync(opts.config)) {
  config = fs.readJSONFileSync(opts.config)
}

if (opts.rock && !opts.file) {
  rock.fetchRepo(opts.path, opts.rock, config, function(err){
    if (err) cl.exit(1, err)
  })
}

if (opts.rock && opts.file) {
  if (opts.topen && opts.tclose) {
    config.tokens = {open: topen, close: tclose}
  }

  rock.fetchFile(opts.path, opts.rock, config, function(err) {
    if (err) cl.exit(1, err)
  })
}




