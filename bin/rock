#!/usr/bin/env node

var fnoc = require('fnoc').configs()
  , P = require('autoresolve')
  , util = require('util')
  , rock = require(P('lib/rock.js'))
  , path = require('path-extra')
  , fs = require('fs');

var USAGE = util.format("\nRock [%s]: Install project templates.\n", fnoc.package.version);
    USAGE += "Usage: rock [path] -r [rock]";

var opt = require('optimist')
  .usage(USAGE)
  .alias('l', 'list').describe('l', 'show available rocks')
  .alias('r', 'rock').describe('r', 'rock name or repo')
  .alias('u', 'update').describe('u', 'update rock list from official rockconf on Github')
  .alias('c', 'config').describe('c', 'config file path').default('c', path.join(path.homedir(), '.rock', 'rockconf.json'));
var argv = opt.argv;


    var rockConf = null;
    try {
        rockConf = JSON.parse(fs.readFileSync(argv.config).toString());
    } catch (e) {
        console.error(e);
    }

    if (rockConf === null) {
        console.log('Bad rockConf.')
    }

    if (argv.list) {
        rock.list(rockConf);
    } else if (argv.update) {
        rock.update(argv.config);
        console.log('Updated'); //we need callback error handling here
    } else if (argv._.length === 1 || argv.rock) {
        if (argv._.length === 1 && argv.rock) {
            var rockObj = rockConf.rocks[argv.rock];
            var repoPath = null;
            if (rockObj) {
                repoPath = rockObj.repo;
            } else {
                repoPath = argv.rock; //here we are assuming a repo path was passed in instead of a rock name
            }
            rock.create(argv._[0], repoPath, function(err){
                if (err) 
                    console.log(err);
                else
                    console.log('success')
            });
        } else {
            displayHelp();
        }
    }
    else {
        displayHelp();
    }


function displayHelp(){
    console.log(opt.help())
    process.exit();
}


